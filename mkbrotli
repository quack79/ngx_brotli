#!/bin/bash

# https://github.com/majal/maj-server/tree/master/nginx-modules-brotli
# https://devopsan.com/how-to-install-auto-upgrade-nginx-brotli-module-on-ubuntu/

# Can be run in post-upgrade by creating "/etc/apt/apt.conf.d/100-nginx-post-update"
# DPkg::Post-Invoke {"/home/user/mkbrotli"; };

# Modified and updated to work with newest Brotli versions, and only runs if NGINX has been updated

# Required dependencies
# sudo apt -y install git libpcre3 libpcre3-dev zlib1g zlib1g-dev openssl libssl-dev

ngx_brotli() {
    trap 'printf "Aborted by user. exiting...\n";exit' INT

    ngx_brotli_upgrade() {

        # For automated detection of currently installed NGINX version:
        ngver=$(nginx -v 2>&1 | grep -o '[0-9\.]*')

        # Automatically select NGINX modules directory:
        [ -d /usr/share/nginx/modules ] && moddir=/usr/share/nginx/modules
        [ -d $(nginx -V 2>&1 | grep -o 'prefix=[^ ]*' | sed 's/prefix=//')/modules ] && moddir="$(nginx -V 2>&1 | grep -o 'prefix=[^ ]*' | sed 's/prefix=//')/modules"
        [ -d $(nginx -V 2>&1 | grep -o 'modules-path=[^ ]*' | sed 's/modules-path=//') ] && moddir="$(nginx -V 2>&1 | grep -o 'modules-path=[^ ]*' | sed 's/modules-path=//')"
        [ "${moddir}" ] || { echo '!! missing modules directory, exiting...'; exit 1; }

        # Set temporary directory and build on it
        builddir="$(mktemp -d)"
        cd "${builddir}"

        echo
        echo '################################################################################'
        echo
        echo "Building Brotli for NGINX ${ngver}"
        echo "Temporary build directory: ${builddir}"
        echo "Modules directory: ${moddir}"
        echo

        # Download and unpack NGINX
        wget https://nginx.org/download/nginx-${ngver}.tar.gz && { tar zxf nginx-${ngver}.tar.gz && rm nginx-${ngver}.tar.gz; } || { echo 'Download failed, exiting...'; exit 2; }

        # Download, initialize, and make Brotli dynamic modules
        git clone --recurse-submodules -j8 https://github.com/google/ngx_brotli
        cd ngx_brotli/deps/brotli
        mkdir out && cd out
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_C_FLAGS="-Ofast -m64 -march=native -mtune=native -flto -funroll-loops -ffunction-sections -fdata-sections -Wl,--gc-sections" -DCMAKE_CXX_FLAGS=>cmake --build . --config Release --target brotlienc
        cd ../../../..
        cd nginx-${ngver}
        [ "${confparams}" ] && nice -n 19 ionice -c 3 ./configure --add-dynamic-module=../ngx_brotli "${confparams}" || nice -n 19 ionice -c 3 ./configure --with-compat --add-dynamic-module=../ngx_brotli
        nice -n 19 ionice -c 3 make modules || { echo 'Configure or make failed, exiting...'; exit 4; }

        # Replace Brotli in modules directory
        [ -f "${moddir}/ngx_http_brotli_filter_module.so" ] && sudo mv "${moddir}/ngx_http_brotli_filter_module.so" "${moddir}/ngx_http_brotli_filter_module.so.old"
        [ -f "${moddir}/ngx_http_brotli_static_module.so" ] && sudo mv "${moddir}/ngx_http_brotli_static_module.so" "${moddir}/ngx_http_brotli_static_module.so.old"
        sudo cp objs/*.so "${moddir}/"
        sudo chmod 644 "${moddir}/ngx_http_brotli_filter_module.so" || { echo 'Module permissions failed, exiting...'; exit 5; }
        sudo chmod 644 "${moddir}/ngx_http_brotli_static_module.so" || { echo 'Module permissions failed, exiting...'; exit 6; }

        # Clean up build files
        cd "${builddir}/.."
        sudo rm -r "${builddir}/ngx_brotli"
        rm -r "${builddir}"

        echo
        echo "Sucessfully built and installed latest Brotli for NGINX ${ngver}"
        echo "Modules can be found in ${moddir}"
        echo
        echo '################################################################################'
        echo
    }

    # Pass init argument if you want to install Brotli for the first time
    if [ "" == "init" ]; then
        ngx_brotli_upgrade && return 0
    fi

    if nginx -t 2>&1 | grep -q brotli; then
        printf "Upgrading ngx_brotli...\n"
        ngx_brotli_upgrade && sudo service nginx restart
        systemctl --no-pager status nginx
    else
        echo '#################################'
        printf "ngx_brotli is already up to date\n"
        echo '#################################'
    fi
}

return 2>/dev/null || ngx_brotli "${@}"